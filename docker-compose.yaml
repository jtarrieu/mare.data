version: '3.7'

# Network shared by all the containers
networks:
  mare_data_network:
    name: mare_data_network
    driver: bridge

# Persistent volumes needed
volumes:
  elasticsearch-data:
    driver: local
  kibana-data:
    driver: local
  kafka-connect-data:
    driver: local
  maria-data:
    driver: local

# Services
services:

# DATABASE AND VIZ
# ElasticSearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: elasticsearch
    networks:
      - mare_data_network
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms2g -Xmx4g

# Kibana
  kibana:
    depends_on:
      - elasticsearch
    image: docker.elastic.co/kibana/kibana:8.10.2
    container_name: kibana
    networks:
      - mare_data_network
    volumes:
      - kibana-data:/usr/share/kibana/data
    ports:
      - "5601:5601"
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200

## STREAMING
# Kafka Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.1.3
    hostname: zookeeper
    networks:
      - mare_data_network
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888

# Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.1.3
    hostname: kafka
    container_name: kafka
    networks:
      - mare_data_network
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

# Kafka Rest Proxy
  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest:7.1.3
    hostname: kafka-rest-proxy
    networks:
      - mare_data_network
    ports:
      - "8082:8082"
    environment:
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082/
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://kafka-schema-registry:8081/
      KAFKA_REST_HOST_NAME: kafka-rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:19092
    depends_on:
      - zookeeper
      - kafka

# Kafka Connect
  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.2.1
    hostname: kafka-connect
    container_name: kafka-connect
    networks:
      - mare_data_network
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:19092"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://kafka-schema-registry:8081'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://kafka-schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: '/usr/share/java,/etc/kafka-connect/jars,/usr/share/confluent-hub-components'
    volumes:
      - ./connectors:/etc/kafka-connect/jars/
      - kafka-connect-data:/etc/kafka-connect/data   # persistent data

    depends_on:
      - zookeeper
      - kafka
      - kafka-rest-proxy

## DATA SIMULATION
# UDP Server
  udp-server:
    build:
      context: ./udp-server/
    container_name: udp-server
    networks:
      - mare_data_network
    ports:
      - "20001:20001/udp"
    restart: always
    depends_on:
      - kafka
    volumes:
      - ./udp-server/:/app

# UDP Client 1
  udp-client-1:
    build:
      context: ./udp-client-1/
    depends_on:
      - udp-server
    container_name: udp-client-1
    networks:
      - mare_data_network

# TEST STREAMING WITH 2 SENSORS
# UDP Client 2
  udp-client-2:
    build:
      context: ./udp-client-2/
    depends_on:
      - udp-server
    container_name: udp-client-2
    networks:
      - mare_data_network

## TO EDIT ON A VM WITH SSH ONLY
# # Jupyter IDE
#   jupyter:
#     image: jupyter/base-notebook
#     container_name: jupyter
#     networks:
#       - mare_data_network
#     ports:
#       - "8888:8888"
#     command: start-notebook.sh --NotebookApp.token=''
#     volumes:
#       - .:/home/jovyan/

## DATA MIGRATION CONTAINERS
# # MariaDB
#   maria:
#     image: mariadb:latest
#     container_name: maria
#     networks:
#       - mare_data_network
#     environment:
#       MYSQL_ROOT_PASSWORD: admin
#       MYSQL_USER: maredata
#       MYSQL_PASSWORD: m@reD4T4
#     ports:
#       - "3306:3306"
#     volumes:
#      - ./data:/data
#      - maria-data:/var/lib/mysql

# # PHP My Admin
#   phpmyadmin:
#     image: phpmyadmin
#     container_name: phpmyadmin
#     networks:
#       - mare_data_network
#     restart: always
#     ports:
#       - "8080:80"
#     environment:
#       - PMA_ARBITRARY=1

# # python extraction
#   python-extraction:
#     build:
#       context: ./python-extraction/
#     depends_on:
#       - maria
#     container_name: python-extraction
#     networks:
#       - mare_data_network
#     volumes:
#       - ./data_gen/:/data:rw
#       - ./extraction:/extraction:rw

# end of file.
